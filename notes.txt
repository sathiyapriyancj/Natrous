Reset Functionality 

1. For the first one is that the user sends a post request to a forgot password route, only with this email address. This will then create a reset token just normal token not jwt.

2. The user then sends that token from him email along with a new password in order to update his password.

Implementations

1. Get user based on POSTed email.

2. Generate the random reset token , Now if you're wondering why we are
actually creating this token.

- Basically this token is what we're gonna send
to the user and so it's like a reset password really that the user can then use to create a new real password, And of course, only the user will have access to this token.

- And so in fact, it really behaves kind of like a password. 

- It look like a password means so we need protect it also If we would just simply store this reset token in our database now, then if some attacker gains access to the database, they could then use that token and create a new password using that token instead of you doing it.

- They would then effectively control your account

- Just like a password, we should never store a plain reset token in the database SO you need to encrypt you not like a password has you can use crypto module.

- Because these reset tokens are a way less dangerous attack vector.
- Of course we need to send via email the unencrypted reset token because otherwise it wouldn't make much sense to encrypt it at all. 

- If the token that was in the database was the exact same that we could use
to actually change the password, to actually change the password,

- We sent one token via email and then we have the encrypted version in our database. And that encrypted one is then basically useless to change the password.


3. Send it to user's email.


